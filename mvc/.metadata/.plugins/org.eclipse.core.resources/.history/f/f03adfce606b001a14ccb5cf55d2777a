package com.yj.homework;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.yj.homework.controller.TaskController;

import static org.hamcrest.Matchers.equalTo;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest
public class HomeworkApplicationTests {

	private MockMvc mvc;

	@Autowired
	private TaskController taskController;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		this.mvc = MockMvcBuilders.standaloneSetup(taskController).build();
	}

	@Test
	public void testTaskController() throws Exception {

		RequestBuilder request;

		request = get("/api/tasks/1");
		mvc.perform(request)
			.andExpect(status().isOk())
			.andExpect(content().string(equalTo("{\"status\":200,\"message\":\"task don't exist\",\"data\":null}")));

	}

}
